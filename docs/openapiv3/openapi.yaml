openapi: 3.0.3
info:
  title: RustDok Server API
  description: |
    RustDok is an S3-compatible object storage server built with Rust.
    It provides a RESTful API for managing buckets and objects in an S3-compatible storage backend.
  version: 0.1.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: RustDok Team
servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Health
    description: Health check endpoints for container orchestration
  - name: Buckets
    description: Operations for managing buckets
  - name: Objects
    description: Operations for managing objects within buckets

paths:
  /healthz:
    get:
      summary: Liveness check
      description: Returns a 200 OK response if the server is running
      tags:
        - Health
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Server is running

  /readyz:
    get:
      summary: Readiness check
      description: Returns a 200 OK response if the server is ready to accept requests
      tags:
        - Health
      responses:
        '200':
          description: Server is ready to accept requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Server is ready to accept requests

  /api/v1/buckets:
    get:
      summary: List all buckets
      description: Returns a list of all buckets
      tags:
        - Buckets
      responses:
        '200':
          description: A list of buckets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["bucket1", "bucket2", "bucket3"]
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new bucket
      description: Creates a new bucket with the specified name
      tags:
        - Buckets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBucketRequest'
      responses:
        '201':
          description: Bucket created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bucket 'my-bucket' created successfully
        '400':
          description: Bad request (e.g., empty bucket name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Bucket already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bucket/{bucket}:
    delete:
      summary: Delete a bucket
      description: Deletes a bucket and all its contents
      tags:
        - Buckets
      parameters:
        - name: bucket
          in: path
          required: true
          description: Name of the bucket to delete
          schema:
            type: string
      responses:
        '200':
          description: Bucket deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bucket 'my-bucket' deleted successfully
        '404':
          description: Bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Bucket is not empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bucket/{bucket}/objects:
    get:
      summary: List objects in a bucket
      description: Lists objects in a bucket, optionally filtered by prefix
      tags:
        - Objects
      parameters:
        - name: bucket
          in: path
          required: true
          description: Name of the bucket
          schema:
            type: string
        - name: prefix
          in: query
          required: false
          description: Optional prefix to filter objects by
          schema:
            type: string
      responses:
        '200':
          description: A list of objects in the bucket
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectInfo'
        '404':
          description: Bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bucket/{bucket}/object:
    post:
      summary: Upload an object
      description: Uploads a file to the specified bucket
      tags:
        - Objects
      parameters:
        - name: bucket
          in: path
          required: true
          description: Name of the bucket
          schema:
            type: string
        - name: prefix
          in: query
          required: false
          description: Optional prefix (folder path) for the object
          schema:
            type: string
        - name: replace
          in: query
          required: false
          description: Whether to replace existing objects with the same name
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
      responses:
        '201':
          description: Object uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File 'example.txt' uploaded successfully
                  key:
                    type: string
                    example: folder/example.txt
        '400':
          description: Bad request (e.g., no file provided)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Object already exists and replace=false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bucket/{bucket}/object/{key}:
    delete:
      summary: Delete an object
      description: Deletes an object from the bucket
      tags:
        - Objects
      parameters:
        - name: bucket
          in: path
          required: true
          description: Name of the bucket
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: Key (path) of the object to delete
          schema:
            type: string
      responses:
        '200':
          description: Object deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Object 'folder/example.txt' deleted successfully
        '404':
          description: Object or bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bucket/{bucket}/download/{key}:
    get:
      summary: Download an object
      description: Downloads an object from the bucket
      tags:
        - Objects
      parameters:
        - name: bucket
          in: path
          required: true
          description: Name of the bucket
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: Key (path) of the object to download
          schema:
            type: string
      responses:
        '200':
          description: The binary data of the object with appropriate content type
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Object or bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bucket/{bucket}/view/{key}:
    get:
      summary: View an object
      description: Views an object in the browser with appropriate content type
      tags:
        - Objects
      parameters:
        - name: bucket
          in: path
          required: true
          description: Name of the bucket
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: Key (path) of the object to view
          schema:
            type: string
      responses:
        '200':
          description: The object content with appropriate content type
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '404':
          description: Object or bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bucket/{bucket}/folders:
    post:
      summary: Create a folder
      description: Creates a new folder in the bucket
      tags:
        - Objects
      parameters:
        - name: bucket
          in: path
          required: true
          description: Name of the bucket
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRequest'
      responses:
        '201':
          description: Folder created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Folder 'my-folder/' created successfully
        '400':
          description: Bad request (e.g., invalid folder name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bucket/{bucket}/exists:
    get:
      summary: Check if object exists
      description: Checks if an object exists in the bucket
      tags:
        - Objects
      parameters:
        - name: bucket
          in: path
          required: true
          description: Name of the bucket
          schema:
            type: string
        - name: filename
          in: query
          required: true
          description: The filename to check
          schema:
            type: string
      responses:
        '200':
          description: Object exists status
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
        '404':
          description: Bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Failed to list buckets
    
    CreateBucketRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the bucket to create
          example: my-bucket
    
    CreateFolderRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the folder to create (must end with a slash)
          example: my-folder/
    
    ObjectInfo:
      type: object
      properties:
        key:
          type: string
          description: The object key (path)
          example: folder/example.txt
        size:
          type: integer
          format: int64
          description: Size of the object in bytes
          example: 1024
        last_modified:
          type: string
          format: date-time
          description: Last modified timestamp
          example: 2023-01-01T12:00:00Z
        is_folder:
          type: boolean
          description: Whether the object is a folder
          example: false 